{{- define "user.secret.name" -}}
{{ printf "%s-%s" .databaseName .userName }}
{{- end -}}

{{- define "user.password" -}}
{{- $user := . -}}
{{- randAlphaNum 20 -}}
{{- end -}}

{{- define "create.user.sql" }}
{{ printf "create user %s password '%s';\n" .userName .password }}
{{- end -}}
---
apiVersion: stackgres.io/v1
kind: SGScript
metadata:
  name: init-database-script
spec:
  managedVersions: true
  continueOnError: false
  scripts:
  {{- if .Values.database.owner }}
  - name: create-user-{{ .Values.database.owner }}
    scriptFrom:
      secretKeyRef: # read the user from a Secret to maintain credentials in a safe place
        name: {{ include "user.secret.name" (dict "databaseName" (include "postgres.database.name" $) "userName" .Values.database.owner ) }}
        key: create-user.sql        
   {{- end }}
   {{- range $user := .Values.database.users }}
  - name: create-user-{{ $user.name }}
    scriptFrom:
      secretKeyRef: # read the user from a Secret to maintain credentials in a safe place
        name: {{ include "user.secret.name" (dict "databaseName" (include "postgres.database.name" $) "userName" $user.name ) }}
        key: create-user.sql
    {{- end }}
  - name: create-stackgres-database
    script: |
      CREATE DATABASE {{ template "postgres.database.name" . }} WITH OWNER {{ .Values.database.owner }};
  - name: grant-roles-to-users
    database: {{ template "postgres.database.name" . }}
    script: |
{{- range $user := .Values.database.users -}}
{{- range $role := $user.roles -}}
{{ printf "GRANT %s TO %s;" $role $user.name | nindent 6}}
{{- end }}
{{ end }}
    
{{- $allUsers := append .Values.database.users (dict "name" .Values.database.owner) -}}
{{- range $user := $allUsers -}}
{{- $password := include "user.password" $user.name -}}
---
apiVersion: v1
data: 
  dbname: {{ include "postgres.database.name" $ | b64enc }}
  host: {{ include "postgres.cluster.name" $ | b64enc }}
  port: {{ 5432 | toString | b64enc }}
  user: {{ $user.name | b64enc }}
  password: {{ $password | b64enc }}
  create-user.sql: |
    {{ include "create.user.sql" (dict "userName" $user.name "password" $password) | b64enc }}
kind: Secret
metadata:  
  name: {{ include "user.secret.name" (dict "databaseName" (include "postgres.database.name" $) "userName" $user.name )}}  
type: Opaque
{{ end }}



