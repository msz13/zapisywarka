// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZapisywarkaClientAps.ZapisywarkaApi.Test.Features.Registrations
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature : object, Xunit.IClassFixture<PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "show-offer-form.feature"
#line hidden
        
        public PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature(PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature.FixtureData fixtureData, ZapisywarkaClientAps_ZapisywarkaApi_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Registrations", "Prezentacja formularza zbierania zapisów dla koordynatora", @"Aby móc przyjmować zapisy, na pozycje określone w swojej ofercie, po stworzeniu oferty dostępny jest formularz zawierający informacje zawarte w ofercie.
  
  
    * ułatwić zbieranie zapisów, poprzez ich późniejsze łatwiejsze wyszukiwanie, 
      przeglądanie, dokonywanie operacji na nich, gromadzenie informacji o realizowanych operacjach
    * ułatwić ich zabieranie poprzez różne kanały i źródła,", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
#line hidden
#line 11
    testRunner.Given("Koordynator zapisów \"Andrzej\" jest zalogowany", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Przyjmujący zapisy przegląda formularz zapisów")]
        [Xunit.TraitAttribute("FeatureTitle", "Prezentacja formularza zbierania zapisów dla koordynatora")]
        [Xunit.TraitAttribute("Description", "Przyjmujący zapisy przegląda formularz zapisów")]
        [Xunit.TraitAttribute("Category", "web")]
        [Xunit.TraitAttribute("Category", "current")]
        public virtual void PrzyjmujacyZapisyPrzegladaFormularzZapisow()
        {
            string[] tagsOfScenario = new string[] {
                    "web",
                    "current"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Przyjmujący zapisy przegląda formularz zapisów", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nazwa"});
                table2.AddRow(new string[] {
                            "Chleb wiejski"});
                table2.AddRow(new string[] {
                            "Chleb foremkowy z żurawiną"});
                table2.AddRow(new string[] {
                            "Chleb foremkowy z oliwkami"});
#line 17
    testRunner.Given("Organizator zapisów stworzył ofertę o nazwie \"Poniedziałek\" zawierającą następują" +
                        "ce pozycje:", ((string)(null)), table2, "Given ");
#line hidden
#line 22
    testRunner.When("Przegląda formularz rejestracji/formularz przyjmowania zapisów", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("Formularz zapisów, zawiera powyższe dane", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PrezentacjaFormularzaZbieraniaZapisowDlaKoordynatoraFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
